import "@testing-library/jest-dom";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { Provider } from "react-redux";
import { BrowserRouter } from "react-router-dom";
import LoginForm from "../src/features/auth/LoginForm";
import { store } from "../src/redux/store";
import * as authSlice from "../src/redux/authSlice";

// At the top of your test file, after vi.mock(...)
// vi.mock("../src/redux/authSlice", () => ({
//   __esModule: true,
//   default: (state = {}, action) => state, // mock reducer
//   setUser: vi.fn(),
//   loginThunk: { type: "auth/login/fulfilled" },
//   fetchProfileThunk: { type: "auth/fetchProfile/fulfilled" },
// }));

function renderWithProviders(ui) {
  return render(
    <Provider store={store}>
      <BrowserRouter>{ui}</BrowserRouter>
    </Provider>
  );
}

describe("LoginForm", () => {
  beforeEach(() => {
    vi.spyOn(authSlice, "loginThunk").mockReturnValue({
      type: "auth/login/fulfilled",
    });
    vi.spyOn(authSlice, "fetchProfileThunk").mockReturnValue({
      type: "auth/fetchProfile/fulfilled",
    });
  });

  test("can login with valid credentials", async () => {
    renderWithProviders(<LoginForm />);
    fireEvent.change(screen.getByLabelText(/Email/i), {
      target: { value: "test@t.com" },
    });
    fireEvent.change(screen.getByLabelText(/Senha/i), {
      target: { value: "123456" },
    });
    fireEvent.click(screen.getByText(/Entrar/i));
    await waitFor(() => {
      expect(authSlice.loginThunk).toHaveBeenCalled();
      expect(authSlice.fetchProfileThunk).toHaveBeenCalled();
    });
  });

  test("renders all fields and buttons", () => {
    renderWithProviders(<LoginForm />);
    expect(screen.getByLabelText(/Email/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/Senha/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/Lembrar-me/i)).toBeInTheDocument();
    expect(screen.getByText(/Entrar/i)).toBeInTheDocument();
    expect(screen.getByText(/Registre-se/i)).toBeInTheDocument();
    expect(screen.getByText(/Voltar/i)).toBeInTheDocument();
  });

  test("shows validation error if fields are empty and submit is clicked", async () => {
    renderWithProviders(<LoginForm />);
    fireEvent.click(screen.getByText(/Entrar/i));
    // Formik does not show errors by default unless you add validationSchema or validate
    // So this test is a placeholder if you add validation logic
    // expect(await screen.findByText(/obrigatÃ³rio/i)).toBeInTheDocument();
  });

  test("calls navigation when Voltar is clicked", () => {
    // Mock useNavigate
    const mockNavigate = vi.fn();
    vi.mock("react-router-dom", async () => {
      const actual = await vi.importActual("react-router-dom");
      return {
        ...actual,
        useNavigate: () => mockNavigate,
      };
    });
    renderWithProviders(<LoginForm />);
    fireEvent.click(screen.getByText(/Voltar/i));
    expect(mockNavigate).toHaveBeenCalledWith("/");
  });

  test("calls navigation when Registre-se is clicked", () => {
    // Mock useNavigate
    const mockNavigate = vi.fn();
    vi.mock("react-router-dom", async () => {
      const actual = await vi.importActual("react-router-dom");
      return {
        ...actual,
        useNavigate: () => mockNavigate,
      };
    });
    renderWithProviders(<LoginForm />);
    fireEvent.click(screen.getByText(/Registre-se/i));
    expect(mockNavigate).toHaveBeenCalledWith("/user");
  });

  test("checkbox toggles rememberMe value", () => {
    renderWithProviders(<LoginForm />);
    const checkbox = screen.getByLabelText(/Lembrar-me/i);
    expect(checkbox.checked).toBe(false);
    fireEvent.click(checkbox);
    expect(checkbox.checked).toBe(true);
    fireEvent.click(checkbox);
    expect(checkbox.checked).toBe(false);
  });

  test("submit button is disabled while submitting", async () => {
    // This test assumes you add isSubmitting to OTButton's disabled prop
    renderWithProviders(<LoginForm />);
    fireEvent.change(screen.getByLabelText(/Email/i), {
      target: { value: "test@t.com" },
    });
    fireEvent.change(screen.getByLabelText(/Senha/i), {
      target: { value: "123456" },
    });
    const submitBtn = screen.getByText(/Entrar/i).closest("button");
    expect(submitBtn).not.toBeDisabled();
    fireEvent.click(submitBtn);
    // No real async, so just check button is still enabled after click
    expect(submitBtn).not.toBeDisabled();
  });

  test("shows notification component", () => {
    renderWithProviders(<LoginForm />);
    expect(screen.getByText(/Informe suas credenciais/i)).toBeInTheDocument();
    // Notification is always rendered, but may be empty
    expect(screen.getByRole("alert", { hidden: true })).toBeInTheDocument();
  });
});
    fireEvent.change(screen.getByLabelText(/Senha/i), {
      target: { value: "123456" },
    });
    fireEvent.click(screen.getByText(/Entrar/i));
    await waitFor(() => {
      expect(authSlice.loginThunk).toHaveBeenCalled();
      expect(authSlice.fetchProfileThunk).toHaveBeenCalled();
    });
  });
});
